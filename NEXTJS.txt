NEXT
_______

Head
Link
Image
Script

Folder Based Routing

_________

TYPESCRIPT TYPES: 

1. GetStaticProps, GetStaticPaths, and GetServerSideProps
2. NextApiRequest, NextApiResponse
3. AppProps
_______

Pre-Rendering : 

	1. Static Generation -> generates the HTML at build time. The pre-rendered HTML is then reused on each request.
	2. Server-Side Rendering -> generates the HTML on each request.


We can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.
________


Static Generation without Data -> 
	Do not require fetching external data. 	
	Will automatically be statically generated when the app is built for production.

Static Generation with Data  (using getStaticProps function) ->

	getStaticProps runs at build time in production, and…
	Inside the function, you can fetch external data(File, External API or Query Database) and send it as props to the page.

	In development mode, getStaticProps runs on each request instead.
	
	Essentially, getStaticProps tell Next.js: “Hey, this page has some data dependencies — so when you pre-render this page at build time, make sure to resolve them first!”
	
	[ 
		getStaticProps only runs on the server-side. 
		It will never run on the client-side. 
		It won’t even be included in the JS bundle for the browser. 
		That means you can write code such as direct database queries without them being sent to browsers.
	]

[
export async function getSortedPostsData() {
  // Instead of the file system or DB query,
  // fetch post data from an external API endpoint
  const res = await fetch('..');
  return res.json();
}

then,

import { getSortedPostsData } from '../lib/posts';

export async function getStaticProps() {
  const allPostsData = getSortedPostsData();
  return {
    props: {
      allPostsData,
    },
  };
}
]

________________________

Development vs. Production

	In development (npm run dev or yarn dev), getStaticProps runs on every request.
	In production, getStaticProps runs at build time. However, this behavior can be enhanced using the fallback key returned by getStaticPaths
	Because it’s meant to be run at build time, you won’t be able to use data that’s only available during request time, such as query parameters or HTTP headers.

Only Allowed in a Page

	getStaticProps can only be exported from a page. You can’t export it from non-page files.

	One of the reasons for this restriction is that React needs to have all the required data before the page is rendered.
________________________


Next.js polyfills fetch() on both the client and server. You don't need to import it.

Since Static Generation happens once at build time, it's not suitable for data that updates frequently or changes on every user request.

In cases like this, where your data is likely to change, you can use Server-side Rendering.

______________


Server-Side Rendering (Fetching Data at Request Time)
	If you need to fetch data at request time instead of at build time, you can try Server-side Rendering.

To use Server-side Rendering, you need to export getServerSideProps instead of getStaticProps from your page.

Using getServerSideProps function --> 

[
export async function getServerSideProps(context) {
  return {
    props: {
      // props for your component
    },
  };
}
]

[	
	Because getServerSideProps is called at request time, its parameter (context) contains request specific parameters.

	You should use getServerSideProps only if you need to pre-render a page whose data must be fetched at request time. 
	Time to first byte (TTFB) will be slower than getStaticProps because the server must compute the result on every request, 
		and the result cannot be cached by a CDN without extra configuration.

]

_______________________________________________

Client-Side Rendering
	If you do not need to pre-render the data, you can also use the following strategy (called Client-side Rendering):

		Statically generate (pre-render) parts of the page that do not require external data.
		When the page loads, fetch external data from the client using JavaScript and populate the remaining parts.

This approach works well for user dashboard pages, for example. 
Because a dashboard is a private, user-specific page, SEO is not relevant, and the page doesn’t need to be pre-rendered. 
The data is frequently updated, which requires request-time data fetching.

SWR
The team behind Next.js has created a React hook for data fetching called SWR. We highly recommend it if you’re fetching data on the client side. It handles caching, revalidation, focus tracking, refetching on interval, and more.

[
import useSWR from 'swr';

function Profile() {
  const { data, error } = useSWR('/api/user', fetch);

  if (error) return <div>failed to load</div>;
  if (!data) return <div>loading...</div>;
  return <div>hello {data.name}!</div>;
}
]

_____________________________________________________

EXTRAS -->

YAML Front Matter (A MarkDown File Containg Metadata Section At Top)-  

	Installing gray-matter
	First, install gray-matter which lets us parse the metadata in each markdown file.

	npm install gray-matter	

1. fs is a Node.js module that lets you read files from the file system.
2. path is a Node.js module that lets you manipulate file paths.


________________________________________________________


Dynamic Routes -->

Implement getStaticPaths -

	Create a file like [id].js ([id] is just like a variable whose value can be anything)


it must be an array of objects that look like the comment above. Each object must have the params key and contain an object with the id key (because we’re using [id] in the file name). Otherwise, getStaticPaths will fail.

getStaticPaths will work with ->
	Array Containing Objects where each object have the 'params' key and contain an object with the 'id' key (because we’re using [id] in the file name).

e.g., 

[
      {
        params: {
          id: 'ssg-ssr'
        }
      },
      {
        params: {
          id: 'pre-rendering'
        }
      }
]

____________________________

Dynamic Routing Working --> 

File Name :- [id].js ([] important)
File must contain -
	React Component To Render The Page
	getStaticPaths to return array of possible values for id
	getStaticProps which fetches necessary data in above format of [ {params: {id: "ssr-ssg", ...}} , ... ]

Fallback
Recall that we returned fallback: false from getStaticPaths. What does this mean?

If fallback is false, then any paths not returned by getStaticPaths will result in a 404 page.

If fallback is true, then the behavior of getStaticProps changes:

The paths returned from getStaticPaths will be rendered to HTML at build time.
The paths that have not been generated at build time will not result in a 404 page. Instead, Next.js will serve a “fallback” version of the page on the first request to such a path.
In the background, Next.js will statically generate the requested path. Subsequent requests to the same path will serve the generated page, just like other pages pre-rendered at build time.
If fallback is blocking, then new paths will be server-side rendered with getStaticProps, and cached for future requests so it only happens once per path.

_______________________________

Catch-all Routes

Dynamic routes can be extended to catch all paths by adding three dots (...) inside the brackets. For example:

pages/posts/[...id].js matches /posts/a, but also /posts/a/b, /posts/a/b/c and so on.
If you do this, in getStaticPaths, you must return an array as the value of the id key like so:

return [
  {
    params: {
      // Statically Generates /posts/a/b/c
      id: ['a', 'b', 'c'],
    },
  },
  //...
];
And params.id will be an array in getStaticProps:

export async function getStaticProps({ params }) {
  // params.id will be like ['a', 'b', 'c']
}
___________________________

Router
If you want to access the Next.js router, you can do so by importing the useRouter hook from next/router.

404 Pages
To create a custom 404 page, create pages/404.js. This file is statically generated at build time.

// pages/404.js
export default function Custom404() {
  return <h1>404 - Page Not Found</h1>;
}
________________________________

Render Markdown File

To render markdown content, we’ll use the remark library
	npm install remark remark-html
___________________

Formatting the Date
	npm install date-fns

_________________________





API ROUTING :-


API Routes let you create an API endpoint inside a Next.js app. 
You can do so by creating a function inside the pages/api directory that has the following format:

// req = HTTP incoming message, res = HTTP server response
export default function handler(req, res) {
  // ...
}

They can be deployed as Serverless Functions (also known as Lambdas).



Creating a simple API endpoint ->

// inside pages/api -> hello.js

export default function handler(req, res) {
  res.status(200).json({ text: 'Hello' });
}



Do Not Fetch an API Route from getStaticProps or getStaticPaths
You should not fetch an API Route from getStaticProps or getStaticPaths. Instead, write your server-side code directly in getStaticProps or getStaticPaths (or call a helper function).

Here’s why: getStaticProps and getStaticPaths run only on the server-side and will never run on the client-side. Moreover, these functions will not be included in the JS bundle for the browser. That means you can write code such as direct database queries without sending them to browsers. Read the Writing Server-Side code documentation to learn more.


A Good Use Case: Handling Form Input
A good use case for API Routes is handling form input. For example, you can create a form on your page and have it send a POST request to your API Route. You can then write code to directly save it to your database. The API Route code will not be part of your client bundle, so you can safely write server-side code.

export default function handler(req, res) {
  const email = req.body.email;
  // Then save email to your database, etc...
}



Preview Mode
Static Generation is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to preview the draft immediately on your page. You’d want Next.js to render these pages at request time instead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case.

Next.js has a feature called Preview Mode to solve the problem above, and it utilizes API Routes. 

__________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________


